#include <stdio.h>
#include <stdlib.h>

#include "field.h"
#include "display.h"

static int cache_x;
static int cache_y;
static char **cache = NULL;

void display_init(struct Field *field) {
	cache_x = field->width;
	cache_y = field->height;
	cache = malloc(cache_y * sizeof(char *));
	for (int i = 0; cache_y > i; i++) {
		cache[i] = malloc(cache_x * sizeof(char));
	}

	for (int y = 0; cache_y > y; y++) {
		for (int x = 0; cache_x > x; x++) {
			if (x == field->ant.x && y == field->ant.y) {
				cache[y][x] = 'A';
			}
			else if (field->grid[y][x] == 0) {
				cache[y][x] = '0';
				
			} else {
				cache[y][x] = '1';
			}
		}
	}
}

void display_free() {
	for (int i = 0; cache_y > i; i++) {
		free(cache[i]);
	}
	free(cache);
}



struct Field field_load(FILE *file_state) {
	return field_new(0, 0, 1);
}

void field_display(struct Field *field, int iteration) {
	printf("Iteration: %i\n", iteration);
	for (int y = 0; field->height > y; y++) {
		for (int x = 0; field->width > x; x++) {
			if (x == field->ant.x && y == field->ant.y) {
				printf("A ");
			}
			else {
				printf("%i ", field->grid[y][x]);
			}
		}
		printf("\n");
	}
}

void field_save(struct Field *field, int iteration, char *file_out) {

}
// #include <stdio.h>
// #include <wchar.h>
// #include <locale.h>
// // LINE_VERTICAL:│
// // LINE_HORIZONTAL:─
// // LINE_DOWN_RIGHT:┌
// // LINE_DOWN_LEFT:┐
// // LINE_UP_RIGHT:└
// // LINE_UP_LEFT:┘
// // SQUARE_WHITE: 
// // SQUARE_BLACK:█
// // ARROW_NORTH_WHITE:△
// // ARROW_NORTH_BLACK:▲
// // ARROW_EAST_WHITE:▷
// // ARROW_EAST_BLACK:▶
// // ARROW_SOUTH_WHITE:▽
// // ARROW_SOUTH_BLACK:▼
// // ARROW_WEST_WHITE:◁
// // ARROW_WEST_BLACK:◀
// int main() {
//     
//     printf("▶ \n");
//     
//     char *c = "▶";
//     printf("%s %d \n", c, strlen(c));
//     
//     // setlocale(LC_ALL, "");
//     setlocale(LC_ALL, "C.UTF-8");
//     wchar_t *wc = L"▶";
//     printf("%ls %d \n", wc, wcslen(wc));
//     return 0;
// }
